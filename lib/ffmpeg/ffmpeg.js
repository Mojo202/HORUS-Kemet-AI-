var FFmpeg;(()=>{"use strict";var e={d:(t,r)=>{for(var o in r)e.o(r,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:r[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{FFmpeg:()=>p,a:()=>i,g:()=>d});const r=e=>new Promise(((t,r)=>{const o=new FileReader;o.onload=()=>t(o.result),o.onerror=e=>r(e.target.error),o.readAsArrayBuffer(e)}));var o;(function(e){e[e.LOAD=0]="LOAD",e[e.EXEC=1]="EXEC",e[e.WRITE_FILE=2]="WRITE_FILE",e[e.READ_FILE=3]="READ_FILE",e[e.DELETE_FILE=4]="DELETE_FILE",e[e.RENAME=5]="RENAME",e[e.CREATE_DIR=6]="CREATE_DIR",e[e.LIST_DIR=7]="LIST_DIR",e[e.DELETE_DIR=8]="DELETE_DIR",e[e.MOUNT=9]="MOUNT",e[e.UNMOUNT=10]="UNMOUNT",e[e.ERROR=11]="ERROR",e[e.DOWNLOAD=12]="DOWNLOAD",e[e.PROGRESS=13]="PROGRESS",e[e.LOG=14]="LOG",e[e.TERMINATE=15]="TERMINATE",e[e.MOUNT_WORKERFS=16]="MOUNT_WORKERFS",e[e.UNMOUNT_WORKERFS=17]="UNMOUNT_WORKERFS"})(o||(o={}));const s={log:!1,logger:()=>{},progress:()=>{},coreURL:"",mainName:"main"},a="undefined"!=typeof importScripts,n="undefined"!=typeof SharedArrayBuffer;let i=0;class d{constructor(){this.worker=null,this.onmessage=null,this.onerror=null}async load({coreURL:e,wasmURL:t,workerURL:r}){if(!a)throw new Error("Cannot not found importScripts in current context, this is not a worker context.");if(this.worker)throw new Error("worker is already loaded, you should not load it multiple times.");const o=new URL(e,window.location.origin),s=new URL(t||e.replace(/.js$/,".wasm"),window.location.origin);return this.worker=new Worker(r,{type:"module"}),this.worker.onmessage=this.onmessage,this.worker.onerror=this.onerror,new Promise((e=>{this.worker.onmessage=({data:{type:t,data:r}})=>{e(r)}}),this.worker.postMessage({type:"LOAD",data:{coreURL:o.href,wasmURL:s.href}}))}isLoaded(){return null!==this.worker}async exec(e,{timeout:t=-1}){if(!this.worker)throw new Error("worker is not loaded, you need to load() it first.");return new Promise(((r,o)=>{const s=setTimeout((()=>{o(new Error(`exec() timed out in ${t}ms`))}),t),a=i;this.worker.onmessage=({data:{type:n,data:i}})=>{-1!==t&&clearTimeout(s),r(i)},this.worker.postMessage({type:"EXEC",data:{args:e,timeout:t,key:a}})}))}async writeFile(e,t){if(!this.worker)throw new Error("worker is not loaded, you need to load() it first.");return new Promise(((r,o)=>{const s=i;this.worker.onmessage=({data:{type:e,data:t}})=>{r(t)},this.worker.postMessage({type:"WRITE_FILE",data:{path:e,data:t,key:s}})}))}async readFile(e,t="binary"){if(!this.worker)throw new Error("worker is not loaded, you need to load() it first.");return new Promise(((r,o)=>{const s=i;this.worker.onmessage=({data:{type:e,data:t}})=>{r(t)},this.worker.postMessage({type:"READ_FILE",data:{path:e,encoding:t,key:s}})}))}async deleteFile(e){if(!this.worker)throw new Error("worker is not loaded, you need to load() it first.");return new Promise(((t,r)=>{const o=i;this.worker.onmessage=({data:{type:e,data:r}})=>{t(r)},this.worker.postMessage({type:"DELETE_FILE",data:{path:e,key:o}})}))}async rename(e,t){if(!this.worker)throw new Error("worker is not loaded, you need to load() it first.");return new Promise(((r,o)=>{const s=i;this.worker.onmessage=({data:{type:e,data:t}})=>{r(t)},this.worker.postMessage({type:"RENAME",data:{oldPath:e,newPath:t,key:s}})}))}async createDir(e){if(!this.worker)throw new Error("worker is not loaded, you need to load() it first.");return new Promise(((t,r)=>{const o=i;this.worker.onmessage=({data:{type:e,data:r}})=>{t(r)},this.worker.postMessage({type:"CREATE_DIR",data:{path:e,key:o}})}))}async listDir(e){if(!this.worker)throw new Error("worker is not loaded, you need to load() it first.");return new Promise(((t,r)=>{const o=i;this.worker.onmessage=({data:{type:e,data:r}})=>{t(r)},this.worker.postMessage({type:"LIST_DIR",data:{path:e,key:o}})}))}async deleteDir(e){if(!this.worker)throw new Error("worker is not loaded, you need to load() it first.");return new Promise(((t,r)=>{const o=i;this.worker.onmessage=({data:{type:e,data:r}})=>{t(r)},this.worker.postMessage({type:"DELETE_DIR",data:{path:e,key:o}})}))}terminate(){this.worker&&(this.worker.terminate(),this.worker=null)}}const l=async(e,t)=>{const o=await r(t);return e.writeFile(t.name,new Uint8Array(o))},c=async(e,t,o)=>{const s=[],a=[];for(const r of e)n?s.push("string"==typeof r?await u(r):r):a.push("string"==typeof r?await(async e=>{const t=new URL(e,window.location.href);return{name:e.substring(t.pathname.lastIndexOf("/")+1),data:await(async e=>new Uint8Array(await(await fetch(e)).arrayBuffer()))(e)}})(r):await(async e=>{const t=await r(e);return{name:e.name,data:new Uint8Array(t)}})(r));return s.length>0?t.postMessage({type:"MOUNT_WORKERFS",data:s,key:o},s.map((e=>e.data.buffer))):a.length>0?t.postMessage({type:"MOUNT_WORKERFS",data:a,key:o}):void 0},u=async e=>({name:e.substring(new URL(e,window.location.href).pathname.lastIndexOf("/")+1),data:await(async e=>new Uint8Array(await(await fetch(e)).arrayBuffer()))(e)});class p{constructor(){this.worker=null,this.loaded=!1,this.running=!1,this.on=this.addEventListener,this.off=this.removeEventListener,this.listeners={}}async load(e={}){if(this.loaded)throw Error("ffmpeg.wasm is already loaded, exiting.");{const{log:t=!1,logger:r,progress:o,mainName:n="main",coreURL:i,wasmURL:d,workerURL:p}=Object.assign({},s,e),l=a?new Worker(p||i.replace(/.js$/,".worker.js"),{type:a?"module":void 0}):this.worker,c=i||(n=>`https://unpkg.com/@ffmpeg/core@0.12.6/dist/umd/${n}`)(n);this.worker=l,this.worker.onmessage=this.handleMessage,this.log=t,this.logger=r,this.progress=o;const u=await(async(e,t)=>{if("undefined"!=typeof window&&void 0!==window.document)return URL.createObjectURL(new Blob([e],{type:"application/javascript"}));const o=await r(t);return URL.createObjectURL(new Blob([new TextDecoder("utf-8").decode(o)],{type:"application/javascript"}))})(await(await fetch(c)).text(),c);return new Promise((e=>{this.worker.onmessage=({data:{type:t,data:r}})=>{this.loaded=!0,e(!0),URL.revokeObjectURL(u)}}),this.worker.postMessage({type:o.LOAD,coreURL:u,wasmURL:d}))}}exec(e,t=-1){if(!this.loaded)throw Error("ffmpeg.wasm is not loaded, you should load it first.");if(this.running)throw Error("ffmpeg.wasm is currently running.");this.running=!0;const r=i;return this.worker.postMessage({type:o.EXEC,args:e,timeout:t,key:r}),this.transcodeJob=new Promise((e=>this.listeners.exec=e)),this.transcodeJob}terminate(){this.running&&this.worker.postMessage({type:o.TERMINATE})}async writeFile(e,t){return this.worker.postMessage({type:o.WRITE_FILE,path:e,data:t}),new Promise((e=>this.listeners.writeFile=e))}async readFile(e,t="binary"){const r=i;return this.worker.postMessage({type:o.READ_FILE,path:e,encoding:t,key:r}),new Promise((e=>this.listeners[r]=e))}async deleteFile(e){const t=i;return this.worker.postMessage({type:o.DELETE_FILE,path:e,key:t}),new Promise((e=>this.listeners[t]=e))}async rename(e,t){const r=i;return this.worker.postMessage({type:o.RENAME,oldPath:e,newPath:t,key:r}),new Promise((e=>this.listeners[r]=e))}async createDir(e){const t=i;return this.worker.postMessage({type:o.CREATE_DIR,path:e,key:t}),new Promise((e=>this.listeners[t]=e))}async listDir(e){const t=i;return this.worker.postMessage({type:o.LIST_DIR,path:e,key:t}),new Promise((e=>this.listeners[t]=e))}async deleteDir(e){const t=i;return this.worker.postMessage({type:o.DELETE_DIR,path:e,key:t}),new Promise((e=>this.listeners[t]=e))}async mount(e,t,r){const s=i;return this.worker.postMessage({type:o.MOUNT,fsType:e,options:t,mountPoint:r,key:s}),new Promise((e=>this.listeners[s]=e))}async unmount(e){const t=i;return this.worker.postMessage({type:o.UNMOUNT,mountPoint:e,key:t}),new Promise((e=>this.listeners[t]=e))}async mountWorkerFS(e){const t=i;return c(e,this.worker,t),new Promise((e=>this.listeners[t]=e))}async unmountWorkerFS(e){const t=i;return this.worker.postMessage({type:o.UNMOUNT_WORKERFS,paths:e,key:t}),new Promise((e=>this.listeners[t]=e))}isLoaded(){return this.loaded}getFFmpegVersion(){return this.ffmpegVersion}getCoreVersion(){return this.coreVersion}handleMessage({data:{key:e,type:t,data:r}}){switch(t){case o.LOG:this.log&&this.logger(r);break;case o.PROGRESS:this.progress(r);break;case o.EXEC:this.running=!1,this.listeners.exec(r),delete this.listeners.exec;break;case o.WRITE_FILE:this.listeners.writeFile(r),delete this.listeners.writeFile;break;case o.READ_FILE:case o.DELETE_FILE:case o.RENAME:case o.CREATE_DIR:case o.LIST_DIR:case o.DELETE_DIR:case o.MOUNT:case o.UNMOUNT:case o.MOUNT_WORKERFS:case o.UNMOUNT_WORKERFS:this.listeners[e](r),delete this.listeners[e];break;case o.LOAD:this.ffmpegVersion=r.ffmpegVersion,this.coreVersion=r.coreVersion}}addEventListener(e,t){this.listeners[e]=t}removeEventListener(e,t){this.listeners[e]===t&&delete this.listeners[e]}}FFmpeg=t})()})();
